name: Export Kobweb site

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Add permissions for GITHUB_TOKEN
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  export_and_upload:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      KOBWEB_CLI_VERSION: 0.9.18

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for branch operations

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      # When projects are created on Windows, the executable bit is sometimes lost. So set it back just in case.
      - name: Ensure Gradle is executable
        run: chmod +x gradlew

      # B
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      #      # C
      #      - name: Query Browser Cache ID
      #        id: browser-cache-id
      #        run: echo "value=$(./gradlew -q :site:kobwebBrowserCacheId)" >> $GITHUB_OUTPUT

      # Also C
      - name: Cache Browser Dependencies
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.browser-cache-id.outputs.value }}

      - name: Fetch kobweb
        uses: robinraju/release-downloader@v1.9
        with:
          repository: "varabyte/kobweb-cli"
          tag: "v${{ env.KOBWEB_CLI_VERSION }}"
          fileName: "kobweb-${{ env.KOBWEB_CLI_VERSION }}.zip"
          tarBall: false
          zipBall: false

      - name: Unzip kobweb
        run: unzip kobweb-${{ env.KOBWEB_CLI_VERSION }}.zip

      - name: Debug project structure
        run: |
          echo "Root directory contents:"
          ls -la
          echo "Site directory contents:"
          ls -la site/
          echo "Looking for build.gradle files:"
          find . -name "build.gradle*" -type f

      - name: Run export
        run: |
          cd site
          ../kobweb-${{ env.KOBWEB_CLI_VERSION }}/bin/kobweb export --notty --layout static

      # Debug and prepare export directory
      - name: Debug export location
        run: |
          echo "Checking for exported files:"
          ls -la site/.kobweb/ || echo "No .kobweb directory"
          ls -la site/.kobweb/site/ || echo "No site directory in .kobweb"
          echo "Checking resources folder:"
          ls -la site/.kobweb/site/resources/ || echo "No resources directory"
          echo "Checking screenshot folder:"
          ls -la site/.kobweb/site/resources/screenshot/ || echo "No screenshot directory"
          find site/ -name "*.html" -o -name "*.css" -o -name "*.js" | head -10 || echo "No web files found"

      # Prepare export directory with better copying
      - name: Prepare export files
        run: |
          if [ -d "site/.kobweb/site" ] && [ "$(ls -A site/.kobweb/site)" ]; then
            mkdir -p export
            # Use rsync for better file copying (preserves structure and permissions)
            rsync -av site/.kobweb/site/ export/
            echo "Export directory contents:"
            find export/ -type f | head -20
            echo "Export resources contents:"
            ls -la export/resources/ || echo "No resources in export"
            echo "Export screenshot contents:"
            ls -la export/resources/screenshot/ || echo "No screenshot in export"
          else
            echo "Error: No files found in site/.kobweb/site/"
            echo "Available directories in site/.kobweb/:"
            ls -la site/.kobweb/ || echo "No .kobweb directory found"
            exit 1
          fi

      # Create orphan release branch with improved cleanup
      - name: Create orphan release branch
        run: |
          git checkout --orphan release-temp
          git rm -rf .
          
          if [ -d "export" ] && [ "$(ls -A export)" ]; then
            # Use rsync instead of cp for better copying
            rsync -av export/ ./
            rm -rf export
          else
            echo "Error: Export directory is empty or doesn't exist"
            exit 1
          fi
          
          # Verify resources were copied correctly
          echo "Verifying copied files:"
          ls -la resources/ || echo "No resources directory after copy"
          ls -la resources/screenshot/ || echo "No screenshot directory after copy"
          
          # Clean up only specific build artifacts from root level
          # Don't use wildcards that might affect subdirectories
          [ -f "kobweb-${{ env.KOBWEB_CLI_VERSION }}.zip" ] && rm -f "kobweb-${{ env.KOBWEB_CLI_VERSION }}.zip"
          [ -d "kotlin-js-store" ] && rm -rf kotlin-js-store
          [ -d "kobweb-${{ env.KOBWEB_CLI_VERSION }}" ] && rm -rf "kobweb-${{ env.KOBWEB_CLI_VERSION }}"
          [ -d "build" ] && rm -rf build
          [ -d "site" ] && rm -rf site
          [ -d ".gradle" ] && rm -rf .gradle
          
          # Final verification
          echo "Final directory structure:"
          find . -type f | head -20
          echo "Final resources check:"
          ls -la resources/ || echo "Resources missing!"
          ls -la resources/screenshot/ || echo "Screenshot folder missing!"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Deploy static site from main - $(date)"

      # Push to release branch using GITHUB_TOKEN
      - name: Push to release branch using GITHUB_TOKEN
        run: |
          git remote set-url origin https://github-actions:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push -f origin HEAD:release